module Scala

signature
  constructors
                                : VarPlainId -> VarPlainId0
                                : Patterns -> Patterns0
                                : Type -> Type0
                                : CompoundType -> CompoundType0
                                : NoLExprs -> NoLExprs0
    PackageObject               : ObjectDef -> PackageObject
    Packaging                   : QualId * List(TopStatSemi) -> Packaging
    QualId                      : List(Id) -> QualId
    PackageDeclaration          : QualId * SEMI -> PackageDeclarationSemi
    PackageDeclaration          : QualId * EOL -> PackageDeclarationSemi
                                : PackageObject -> TopStat
                                : Packaging -> TopStat
                                : Import -> TopStat
    TopTmplDef                  : Option(AnnotationSeq) * List(Modifier) * TmplDef -> TopStat
    TopStatSemi                 : TopStat * EOB -> TopStatSemi
    TopStatSemi                 : TopStat * EOF -> TopStatSemi
    TopStatSemi                 : TopStat * EOL -> TopStatSemi
    TopStatSemi                 : TopStat * SEMI -> TopStatSemi
    CompilationUnit             : List(PackageDeclarationSemi) * List(TopStatSemi) -> CompilationUnit
    EmptyCompilationUnit        : CompilationUnit
    AnnotationSeq               : Annotation * AnnotationSeq -> AnnotationSeq
                                : Annotation -> AnnotationSeq
    ConstrAnnotation            : SimpleType * Option(ArgumentExprs) -> ConstrAnnotation
    Annotation                  : SimpleType * Option(ArgumentExprsSeq) -> Annotation
    Assignment                  : Expr -> Assignment
    Bindings                    : List(Binding) -> Bindings
    WildCardBinding             : Option(Type0) -> Binding
    Binding                     : Id * Option(Type0) -> Binding
    ExprTemplateStat            : Expr -> TemplateStat
    ImportTemplateStat          : Import -> TemplateStat
    DclTemplateStat             : Option(AnnotationSeq) * List(Modifier) * Dcl -> TemplateStat
    DefTemplateStat             : Option(AnnotationSeq) * List(Modifier) * Def -> TemplateStat
    TemplateStatSemi            : TemplateStat * EOB -> TemplateStatSemi
    TemplateStatSemi            : TemplateStat * EOL -> TemplateStatSemi
    TemplateStatSemi            : TemplateStat * SEMI -> TemplateStatSemi
                                : SEMI -> TemplateStatSemi
    LazyDefBlockStat            : List(Annotation) * Def -> BlockStat
    ImplicitDefBlockStat        : List(Annotation) * Def -> BlockStat
    DefBlockStat                : List(Annotation) * Def -> BlockStat
    TmplDefBlockStat            : List(Annotation) * List(LocalModifier) * TmplDef -> BlockStat
                                : Expr -> BlockStat
                                : Import -> BlockStat
                                : SEMI -> BlockStatSemi
    BlockStatSemi               : BlockStat * SEMI -> BlockStatSemi
    BlockStatSemi               : BlockStat * EOB -> BlockStatSemi
    BlockStatSemi               : BlockStat * EOL -> BlockStatSemi
    WildcardResultExpr          : Option(CompoundType0) * Block -> ResultExpr
    SimpleResultExpr            : Id * Option(CompoundType0) * Block -> ResultExpr
    ImplicitResultExpr          : Id * CompoundType * Block -> ResultExpr
    BindingsResultExpr          : Bindings * Block -> ResultExpr
    Block                       : List(BlockStatSemi) -> Block
    Block                       : List(BlockStatSemi) * ResultExpr -> Block
    EOCBlockStatSemi            : BlockStat * EOC -> CaseBlockStatSemi
                                : BlockStatSemi -> CaseBlockStatSemi
    CaseBlock                   : List(CaseBlockStatSemi) -> CaseBlock
                                : Block -> CaseBlock
    BlockExpr                   : Block -> BlockExpr
    CaseBlockExpr               : List(CaseClause) -> BlockExpr
    CaseClause                  : Pattern * Option(Guard) * CaseBlock -> CaseClause
    ValDef                      : Pattern1 * Expr -> Enumerator
                                : Guard -> Enumerator
                                : Generator -> Enumerator
    EnumeratorSemi              : Enumerator * EOB -> EnumeratorSemi
    EnumeratorSemi              : Enumerator * EOP -> EnumeratorSemi
    EnumeratorSemi              : Enumerator * EOL -> EnumeratorSemi
    EnumeratorSemi              : Enumerator * SEMI -> EnumeratorSemi
    Guard                       : NoLExpr -> Guard
    Generator                   : Pattern1 * Expr * Option(Guard) -> Generator
    SequenceAscription          : Ascription
    AnnotationAscription        : List(Annotation) -> Ascription
    TypeAscription              : InfixType -> Ascription
    Exprs                       : List(NoLExpr) -> NoLExprs
    ArgumentExprsSeq            : ArgumentExprs * ArgumentExprsSeq -> ArgumentExprsSeq
                                : ArgumentExprs -> ArgumentExprsSeq
    SequenceArgumentExprs       : Option(NoLExprs0) * NoLExpr -> ArgumentExprs
    ArgumentExprs               : Option(NoLExprs) -> ArgumentExprs
                                : Path -> NoLExpr
                                : BlockExpr -> NoLExpr
    DesignatorExpr              : NoLExpr * Id -> NoLExpr
    AssignmentExpr              : Id * NoLExpr -> NoLExpr
    AscriptionExpr              : NoLExpr * Ascription -> NoLExpr
    ReturnExpr                  : Option(NoLExpr) -> NoLExpr
    ThrowExpr                   : NoLExpr -> NoLExpr
    ForYieldExpr                : List(EnumeratorSemi) * NoLExpr -> NoLExpr
    ForExpr                     : List(EnumeratorSemi) * NoLExpr -> NoLExpr
    DoWhileExpr                 : NoLExpr * NoLExpr -> NoLExpr
    TryCatchFinallyExpr         : NoLExpr * NoLExpr * NoLExpr -> NoLExpr
    TryFinallyExpr              : NoLExpr * NoLExpr -> NoLExpr
    TryCatchExpr                : NoLExpr * NoLExpr -> NoLExpr
    TryExpr                     : NoLExpr -> NoLExpr
    WhileExpr                   : NoLExpr * NoLExpr -> NoLExpr
    IfElseExpr                  : NoLExpr * NoLExpr * NoLExpr -> NoLExpr
    IfExpr                      : NoLExpr * NoLExpr -> NoLExpr
    WildcardFunExpr             : NoLExpr -> NoLExpr
    ImplicitFunExpr             : Id * NoLExpr -> NoLExpr
    IdFunExpr                   : Id * NoLExpr -> NoLExpr
    FunExpr                     : Bindings * NoLExpr -> NoLExpr
    DesignatorAssignmentExpr    : NoLExpr * Id * NoLExpr -> NoLExpr
    AccessAssignmentExpr        : NoLExpr * ArgumentExprs * NoLExpr -> NoLExpr
    MatchExpr                   : NoLExpr * List(CaseClause) -> NoLExpr
    PostfixExpr                 : NoLExpr * Id -> NoLExpr
    InfixExpr                   : NoLExpr * LetterOp * NoLExpr -> NoLExpr
    InfixExpr                   : NoLExpr * BarOp * NoLExpr -> NoLExpr
    InfixExpr                   : NoLExpr * CircumflexOp * NoLExpr -> NoLExpr
    InfixExpr                   : NoLExpr * AmpersandOp * NoLExpr -> NoLExpr
    InfixExpr                   : NoLExpr * BracketOp * NoLExpr -> NoLExpr
    InfixExpr                   : NoLExpr * AssignOp * NoLExpr -> NoLExpr
    InfixExpr                   : NoLExpr * ColonOp * NoLExpr -> NoLExpr
    InfixExpr                   : NoLExpr * SumOp * NoLExpr -> NoLExpr
    InfixExpr                   : NoLExpr * MultOp * NoLExpr -> NoLExpr
    InfixExpr                   : NoLExpr * SpecialOp * NoLExpr -> NoLExpr
    PrefixExpr                  : Prefix * NoLExpr -> NoLExpr
    EtaExpansionExpr            : NoLExpr -> NoLExpr
    NewTemplateExpr             : TemplateBody -> NoLExpr
    NewClassExpr                : ClassTemplate -> NoLExpr
    TypeApplication             : NoLExpr * TypeArgs -> NoLExpr
    TupleExpr                   : List(NoLExpr) -> NoLExpr
    BlockAppExpr                : NoLExpr * BlockExpr -> NoLExpr
    AppExpr                     : NoLExpr * ArgumentExprs -> NoLExpr
                                : Literal -> NoLExpr
    WildcardExpr                : NoLExpr
                                : Path -> Expr
                                : Literal -> Expr
                                : BlockExpr -> Expr
    DesignatorExpr              : Expr * Id -> Expr
    AscriptionExpr              : Expr * Ascription -> Expr
    AssignmentExpr              : Id * Expr -> Expr
    ReturnExpr                  : Option(Expr) -> Expr
    ThrowExpr                   : Expr -> Expr
    ForYieldExpr                : List(EnumeratorSemi) * Expr -> Expr
    ForExpr                     : List(EnumeratorSemi) * Expr -> Expr
    DoWhileExpr                 : Expr * Expr -> Expr
    TryCatchFinallyExpr         : Expr * Expr * Expr -> Expr
    TryFinallyExpr              : Expr * Expr -> Expr
    TryCatchExpr                : Expr * Expr -> Expr
    TryExpr                     : Expr -> Expr
    WhileExpr                   : NoLExpr * Expr -> Expr
    IfElseExpr                  : NoLExpr * Expr * Expr -> Expr
    IfExpr                      : NoLExpr * Expr -> Expr
    WildcardFunExpr             : Expr -> Expr
    ImplicitFunExpr             : Id * Expr -> Expr
    IdFunExpr                   : Id * Expr -> Expr
    FunExpr                     : Bindings * Expr -> Expr
    DesignatorAssignmentExpr    : Expr * Id * Expr -> Expr
    AccessAssignmentExpr        : Expr * ArgumentExprs * Expr -> Expr
    MatchExpr                   : Expr * List(CaseClause) -> Expr
    PostfixExpr                 : Expr * Id -> Expr
    InfixExpr                   : Expr * LetterOp * Expr -> Expr
    InfixExpr                   : Expr * BarOp * Expr -> Expr
    InfixExpr                   : Expr * CircumflexOp * Expr -> Expr
    InfixExpr                   : Expr * AmpersandOp * Expr -> Expr
    InfixExpr                   : Expr * BracketOp * Expr -> Expr
    InfixExpr                   : Expr * AssignOp * Expr -> Expr
    InfixExpr                   : Expr * ColonOp * Expr -> Expr
    InfixExpr                   : Expr * SumOp * Expr -> Expr
    InfixExpr                   : Expr * MultOp * Expr -> Expr
    InfixExpr                   : Expr * SpecialOp * Expr -> Expr
    PrefixExpr                  : Prefix * Expr -> Expr
    EtaExpansionExpr            : Expr -> Expr
    NewTemplateExpr             : TemplateBody -> Expr
    NewClassExpr                : ClassTemplate -> Expr
    TypeApplication             : Expr * TypeArgs -> Expr
    TupleExpr                   : List(NoLExpr) -> Expr
    BlockAppExpr                : Expr * BlockExpr -> Expr
    AppExpr                     : Expr * ArgumentExprs -> Expr
    WildcardExpr                : Expr
                                : String -> EOC
    Patterns                    : List(Pattern) -> Patterns
                                : Pattern1 -> Pattern
    DisjunctPattern             : Pattern * Pattern -> Pattern
                                : Pattern2 -> Pattern1
    WildcardTypedPattern        : Type -> Pattern1
    TypedPattern                : VarPlainId * Type -> Pattern1
                                : Pattern3 -> Pattern2
    PatternBinder               : VarPlainId * Pattern3 -> Pattern2
                                : SimplePattern -> Pattern3
    InfixPattern                : Pattern3 * InfixPatternOp * Pattern3 -> Pattern3
                                : StableId -> SimplePattern
    PatternSequence             : StableId * Option(Patterns0) * Option(VarPlainId0) -> SimplePattern
    TuplePattern                : Patterns -> SimplePattern
    ConstructorPattern          : StableId * Patterns -> SimplePattern
    LiteralPattern              : Literal -> SimplePattern
    WildcardPattern             : SimplePattern
    False                       : BooleanLiteral
    True                        : BooleanLiteral
    ProcessedString             : ProcessedString -> Literal
    Null                        : Literal
    Symbol                      : SymbolLiteral -> Literal
    String                      : StringLiteral -> Literal
    Char                        : CharacterLiteral -> Literal
                                : BooleanLiteral -> Literal
    Float                       : FloatingPointLiteral -> Literal
    Int                         : IntegerLiteral -> Literal
                                : String -> InfixPatternOp
    WildcardImportSelector      : Id -> ImportSelector
    MappedImportSelector        : Id * Id -> ImportSelector
    ImportSelector              : Id -> ImportSelector
    OnlyWildcardImportSelectors : ImportSelectors
    ImportSelectorsWithWildcard : List(ImportSelector) -> ImportSelectors
    ImportSelectors             : List(ImportSelector) -> ImportSelectors
    SelectorsImportExpr         : StableId * ImportSelectors -> ImportExpr
    WildcardImportExpr          : StableId -> ImportExpr
    ImportExpr                  : StableId -> ImportExpr
    Import                      : List(ImportExpr) -> Import
    RepeatedParam               : Type -> ParamType
    ByNameParam                 : Type -> ParamType
                                : Type -> ParamType
    Param                       : List(Annotation) * Id * Option(ParamTyped) * Option(Assignment) -> Param
    ParamClause                 : List(Param) -> ParamClause
    ParamClauses                : ParamClause * ParamClauses -> ParamClauses
    ImplicitParamClause         : List(Param) -> ParamClauses
                                : ParamClause -> ParamClauses
    FunSig                      : Id * Option(TypeParamClause) * Option(ParamClauses) -> FunSig
    ProcDcl                     : FunSig -> FunDcl
    FunDcl                      : FunSig * Type -> FunDcl
    TypeContextBound            : Type -> TypeContextBound
    TypeViewBound               : Type -> TypeViewBound
    UpperBoundType              : Type -> UpperBoundType
    LowerBoundType              : Type -> LowerBoundType
    WildcardTypeParam           : Option(TypeParamClause) * Option(LowerBoundType) * Option(UpperBoundType) * List(TypeViewBound) * List(TypeContextBound) -> TypeParam
    TypeParam                   : Id * Option(TypeParamClause) * Option(LowerBoundType) * Option(UpperBoundType) * List(TypeViewBound) * List(TypeContextBound) -> TypeParam
    NegVariantTypeParam         : List(Annotation) * TypeParam -> VariantTypeParam
    PlusVariantTypeParam        : List(Annotation) * TypeParam -> VariantTypeParam
    VariantTypeParam            : List(Annotation) * TypeParam -> VariantTypeParam
    TypeParamClause             : List(VariantTypeParam) -> TypeParamClause
    TypeDef                     : Id * Option(TypeParamClause) * Type -> TypeDef
    TypeDcl                     : Id * Option(TypeParamClause) * Option(LowerBoundType) * Option(UpperBoundType) -> TypeDcl
    WildcardVarDef              : List(Id) * Type -> VarDef
                                : PatDef -> VarDef
    VarDcl                      : List(Id) * Type -> VarDcl
    PatDef                      : List(Pattern2) * Option(Typed) * Expr -> PatDef
    VarPatDef                   : VarDef -> PatVarDef
    ValPatDef                   : PatDef -> PatVarDef
    ValDcl                      : List(Id) * Type -> ValDcl
    FunDclDcl                   : FunDcl -> Dcl
    TypeDclDcl                  : TypeDcl -> Dcl
    VarDclDcl                   : VarDcl -> Dcl
    ValDclDcl                   : ValDcl -> Dcl
    FunDefDef                   : FunDef -> Def
    TypeDefDef                  : TypeDef -> Def
                                : TmplDef -> Def
                                : PatVarDef -> Def
    ParamTyped                  : ParamType -> ParamTyped
    Typed                       : Type -> Typed
    ObjectDef                   : Id * ClassTemplateOpt -> ObjectDef
    EmptyTraitTemplateOpt       : TraitTemplateOpt
                                : TemplateBody -> TraitTemplateOpt
    TemplateTraitTemplateOpt    : TemplateBody -> TraitTemplateOpt
    TraitTraitTemplateOpt       : TraitTemplate -> TraitTemplateOpt
    TraitDef                    : Id * Option(TypeParamClause) * TraitTemplateOpt -> TraitDef
    ConstrBlock                 : SelfInvocation * List(BlockStatSemi) -> ConstrBlock
    ConstrBlock                 : SelfInvocation -> ConstrBlock
    ConstrBlock                 : SelfInvocation * List(BlockStatSemi) -> ConstrBlock
                                : ConstrBlock -> ConstrExpr
                                : SelfInvocation -> ConstrExpr
    BlockSelfInvocation         : BlockExpr -> SelfInvocation
    SelfInvocation              : ArgumentExprsSeq -> SelfInvocation
    MacroDef                    : FunSig * Option(Type0) * StableId * Option(TypeArgs) -> FunDef
    ProcDef                     : FunSig * Block -> FunDef
    FunDef                      : FunSig * Option(Typed) * Expr -> FunDef
    ThisBlockFunDef             : ParamClauses * ConstrBlock -> FunDef
    ThisExprFunDef              : ParamClauses * ConstrExpr -> FunDef
    EmptyClassTemplateOpt       : ClassTemplateOpt
                                : TemplateBody -> ClassTemplateOpt
    TemplateClassTemplateOpt    : TemplateBody -> ClassTemplateOpt
    ClassClassTemplateOpt       : ClassTemplate -> ClassTemplateOpt
    VarClassParam               : List(Annotation) * List(Modifier) * Id * ParamType * Option(Assignment) -> ClassParam
    ValClassParam               : List(Annotation) * List(Modifier) * Id * ParamType * Option(Assignment) -> ClassParam
    ClassParam                  : List(Annotation) * Id * ParamType * Option(Assignment) -> ClassParam
    ClassParamClause            : List(ClassParam) -> ClassParamClause
    ClassParamClauses           : ClassParamClause * ClassParamClauses -> ClassParamClauses
    ImplicitClassParamClause    : List(ClassParam) -> ClassParamClauses
                                : ClassParamClause -> ClassParamClauses
    Polymorph                   : Id * TypeParamClause -> Morphism
                                : Id -> Morphism
    ClassDef                    : Morphism * List(ConstrAnnotation) * Option(AccessModifier) * Option(ClassParamClauses) * ClassTemplateOpt -> ClassDef
    Object                      : ObjectDef -> TmplDef
    CaseObject                  : ObjectDef -> TmplDef
    Trait                       : TraitDef -> TmplDef
    CaseClass                   : ClassDef -> TmplDef
    Class                       : ClassDef -> TmplDef
    ThisQualifier               : AccessQualifier
    AccessQualifier             : Id -> AccessQualifier
    ProtectedModifier           : Option(AccessQualifier) -> AccessModifier
    PrivateModifier             : Option(AccessQualifier) -> AccessModifier
    LazyModifier                : LocalModifier
    ImplicitModifier            : LocalModifier
    SealedModifier              : LocalModifier
    FinalModifier               : LocalModifier
    AbstractModifier            : LocalModifier
    OverrideModifier            : Modifier
                                : AccessModifier -> Modifier
                                : LocalModifier -> Modifier
    EarlyDef                    : Option(AnnotationSeq) * List(Modifier) * PatVarDef -> EarlyDef
    EarlyDefSemi                : EarlyDef * EOB -> EarlyDefSemi
    EarlyDefSemi                : EarlyDef * EOL -> EarlyDefSemi
    EarlyDefSemi                : EarlyDef * SEMI -> EarlyDefSemi
    EarlyDefs                   : List(EarlyDefSemi) -> EarlyDefs
    Constr                      : AnnotType * Option(ArgumentExprsSeq) -> Constr
    TemplateBody                : List(TemplateStatSemi) -> TemplateBody
    SelfTypeTemplateBody        : SelfType * List(TemplateStatSemi) -> TemplateBody
    WildcardSelfType            : Type -> SelfType
    ThisSelfType                : Type -> SelfType
    SelfType                    : Id * Option(Typed) -> SelfType
    WithAnnotType               : AnnotType -> WithAnnotType
    TraitParents                : AnnotType * List(WithAnnotType) -> TraitParents
    ClassParents                : Constr * List(WithAnnotType) -> ClassParents
    TraitTemplate               : Option(EarlyDefs) * TraitParents * Option(TemplateBody) -> TraitTemplate
    ClassTemplate               : Option(EarlyDefs) * ClassParents * Option(TemplateBody) -> ClassTemplate
    LowerAndUpperTypeBound      : Type * Type -> TypeBounds
    UpperTypeBound              : Type -> TypeBounds
    LowerTypeBound              : Type -> TypeBounds
    ExistentialVal              : ValDcl -> ExistentialDcl
    ExistentialType             : TypeDcl -> ExistentialDcl
    ExistentialDclSemi          : ExistentialDcl * EOB -> ExistentialDclSemi
    ExistentialDclSemi          : ExistentialDcl * EOL -> ExistentialDclSemi
    ExistentialDclSemi          : ExistentialDcl * SEMI -> ExistentialDclSemi
    ExistentialClause           : List(ExistentialDclSemi) -> ExistentialClause
    FunctionArgType             : List(ParamType) -> FunctionArgTypes
                                : InfixType -> FunctionArgTypes
    InfixType                   : InfixType * PlainId * InfixType -> InfixType
                                : CompoundType -> InfixType
    ExistentialType             : InfixType * ExistentialClause -> Type
    FunctionType                : FunctionArgTypes * Type -> Type
                                : InfixType -> Type
    TypeRefineStat              : TypeDef -> RefineStat
                                : Dcl -> RefineStat
    RefineStatSemi              : RefineStat * EOB -> RefineStatSemi
    RefineStatSemi              : RefineStat * EOL -> RefineStatSemi
    RefineStatSemi              : RefineStat * SEMI -> RefineStatSemi
    Refinement                  : List(RefineStatSemi) -> Refinement
    With                        : AnnotType -> With
    CompoundType                : AnnotType * List(With) * Option(Refinement) -> CompoundType
    RefinedType                 : AnnotType * Refinement -> CompoundType
                                : Refinement -> CompoundType
                                : AnnotType -> CompoundType
    AnnotType                   : SimpleType * List(Annotation) -> AnnotType
                                : SimpleType -> AnnotType
    TypeArgs                    : List(Type) -> TypeArgs
    WildcardType                : Option(TypeBounds) -> SimpleType
    TupleType                   : List(Type) -> SimpleType
    ParameterizedType           : SimpleType * TypeArgs -> SimpleType
    Type                        : StableId -> SimpleType
    TypeProjection              : SimpleType * Id -> SimpleType
    SingletonType               : Path -> SimpleType
                                : String -> SymbolLiteral
                                : String -> ProcessedString
                                : String -> StringLiteral
                                : String -> CharacterLiteral
                                : String -> FloatingPointLiteral
                                : String -> IntegerLiteral
    ClassQualifier              : PlainId -> ClassQualifier
    StableId                    : List(StableIdElem) * PlainId -> StableId
                                : Id -> StableId
    StableSuper                 : Option(ClassQualifier) -> StableIdElem
    StableThis                  : StableIdElem
                                : PlainId -> StableIdElem
    Super                       : Option(ClassQualifier) * PlainId -> PathElem
    This                        : PathElem
                                : PlainId -> PathElem
    Path                        : List(PathElem) -> Path
                                : Id -> Path
    Id                          : PlainId -> Id
                                : String -> SEMI
                                : String -> EOP
                                : String -> EOB
                                : String -> EOF
                                : String -> EOL
                                : String -> Prefix
                                : String -> PlainId
                                : String -> VarPlainId
                                : String -> SpecialOp
                                : String -> MultOp
                                : String -> SumOp
                                : String -> ColonOp
                                : String -> AssignOp
                                : String -> BracketOp
                                : String -> AmpersandOp
                                : String -> CircumflexOp
                                : String -> BarOp
                                : String -> LetterOp


signature
  constructors
    Some : a -> Option(a)
    None : Option(a)


signature
  constructors
    Cons : a * List(a) -> List(a)
    Nil  : List(a)
    Conc : List(a) * List(a) -> List(a)
